 # import * from "./generated/prisma.graphql"

type SuccessMessage{
	message:String
}

type UserSafe {
   id:ID!
   email:String! 
   name:String!
   username:String!
   chats:[Chat]!   
} 
type UserPayload {
	user:UserSafe!
	token:String
}

type Query{
	users(keyword: String!):[User]!
	me:UserSafe!
	activateAccount(token:String!):SuccessMessage
	isTokenTrue(token:String):SuccessMessage
	chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int):[Chat]!
	messages(id:ID!,orderBy:MessageOrderByInput,skip:Int,after:String,before:String,first: Int, last: Int):[Message]!
    messagesConnection(id:ID!):MessageConnection!
}
type Mutation{
	signup(name:String!,username:String!,email:String!,password:String!):SuccessMessage!
	login(email:String!,password:String!,remember:Boolean):UserPayload!
	forgetPassword(email:String!):SuccessMessage
    resetPassword(newPassword:String!,resetPasswordLink:String!):SuccessMessage
    createChat(
    	name:String!,
    	users:[ID!]!
    	):Chat!
    createMessage(chatId:ID!,text:String!):Message!
    deleteMessage(id:ID):Message!
}
type Subscription{
	chatting:ChatSubscriptionPayload!
	chat(where:ChatSubscriptionWhereInput):ChatSubscriptionPayload!
	message(id:ID):MessageSubscriptionPayload!
}